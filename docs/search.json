[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Artur Baranov",
    "section": "",
    "text": "I am a PhD Student at the Department of Political Science, Northwestern University. My field is Comparative Politics, with a focus on Comparative Authoritarianism. My research toolkit includes quantitative and data science methods.\nIn my research, I study how authoritarian states evolve – how they adapt to challenges, maintain control, and transform their institutions. To study such closed political systems, I extensively rely on quantitative text analysis techniques.\nPrior to joining Northwestern, I studied Political Science at University College Dublin in Ireland, Tor Vergata University of Rome in Italy, and the Higher School of Economics in Russia. Previously, I worked at the Accounts Chamber of the Russian Federation as a transparency auditor.\n\nCurriculum vitae\n\n \n  \n   \n  \n    \n     LinkedIn\n  \n  \n    \n     GitHub\n  \n  \n    \n     Twitter\n  \n  \n    \n     e-mail"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Irish Demographic Poll Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIrish Manifesto Explorer Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects-listing/irish-dem-poll.html",
    "href": "projects-listing/irish-dem-poll.html",
    "title": "Irish Demographic Poll Dashboard",
    "section": "",
    "text": "In this project, I have created an interactive Shiny Dashboard to explore and analyze Irish Demographic Polling Datasets, maintained by a team of Dr. Stefan Müller. These datasets contain aggregated information about vote intentions, satisfaction with the government, and the popularity of party leaders in Ireland. The Shiny Dashboard, built using R, offers users a seamless and user-friendly interface to perform various tasks related to dataset exploration and visualization.\nKey functionality:\n\nDataset selection\n\nUsers can choose from a list of available Irish Demographic Polling Datasets\n\nVariables subset\n\nOnce a dataset is selected, users can specify which variables or columns they want to analyze\nThe dashboard provides options to subset and filter data based on specific criteria, such as date ranges or demographic groups\n\nPlot customization\n\nUsers can create interactive visualizations based on the selected variables\n\nDownload options\n\nUsers can download the customized plots and filtered datasets for further analysis or reporting\nSupported download formats include PNG, PDF, CSV, and Excel, allowing flexibility in exporting results\n\n\n\nExplore Irish Demographic Polling Dashboard"
  },
  {
    "objectID": "projects-listing/test.html",
    "href": "projects-listing/test.html",
    "title": "Old Faithful",
    "section": "",
    "text": "Data on eruptions of the Old Faithful geyser in Yellowstone National Park, Wyoming, USA. The data was collected continuously from August 1st until August 15th, 1985.\n\n\n\nNumber of bins:\n\n\n\n\n\n\n\nThe data consists of 299 pairs of measurements, referring to the time interval between the starts of successive eruptions and the duration of the subsequent eruption.\nClick the Code button above to see the source code for this example."
  },
  {
    "objectID": "contacts.html",
    "href": "contacts.html",
    "title": "Contacts",
    "section": "",
    "text": "I am always available for discussions, so feel free to reach out to me via:\n\n artur.baranov [at] u.northwestern.edu\n\n\n\n\n LinkedIn  GitHub  Twitter\n\n\n Alternatively, you can schedule a meeting with me:"
  },
  {
    "objectID": "projects-listing/irish-manifesto-explorer.html",
    "href": "projects-listing/irish-manifesto-explorer.html",
    "title": "Irish Manifesto Explorer Dashboard",
    "section": "",
    "text": "In this project, I contributed to an interactive Shiny Dashboard to explore and analyze Irish Political Manifestos, maintained by a team of Dr. Stefan Müller.\nThe Manifesto Explorer Dashboard offers a comprehensive view of party manifestos for local and European Parliament elections in Ireland since 1999. Users can delve into the manifestos, compare different parties, and observe changes over time. By clicking on a party manifesto title, you can read the full document. The dashboard also features a search function to look up specific terms and examine their frequency and context within the manifestos.\n\nExplore Irish Manifesto Explorer Dashboard"
  },
  {
    "objectID": "data/01_intro.html",
    "href": "data/01_intro.html",
    "title": "Introduction to Computational Social Science and R",
    "section": "",
    "text": "Understanding social science research. Combination of Statistics and Programming allows you to read, understand, and reproduce other scholars’ works.\nAutomation of manual labor. Programming saves time in many tasks. Calculations, data gathering, and many other tasks could be automated with basic knowledge of programming.\nProducing your own research. Programming empowers researchers to design and execute their own custom analyses, simulations, and data visualizations.\n\n\n\n\nExcel\nStata/SPSS/etc.\nPython\n\nR is the second most-used statistical software in academia.1 New social science methods and thus packages are usually either developed in R or adapted to R (e.g., quanteda for NLP, CEM for causal inference, etc.). However, R allows you to do much more. For example, this website was made with R and RStudio.\n\n\n\nFirst, we need to install R. Click the button below and click “Download and Install R”. Choose your OS. For Windows you need to download “base”; for MacOS and Linux you have to choose the version of your OS. Install.\n\nDownload R\n\n\n\nStep one\n\n\n\n\nFor windows:\n\n\n\n\nSecond, we need to install RStudio. Click the button below and click “Download RStudio Desktop”. You will be redirected to your version automatically. Install.\n\nDownload RStudio\n\n\n\nStep two\n\n\n\n\n\n\n\n\nIt will take some time to understand how everything works in RStudio, but once you understand it, it’s quite straightforward. The most classic UI consists of four panes.\n\nSource. Here we write code to run.\nEnvironment. This pane allows you to interact with the data loaded into RStudio.\nConsole. This pane provides an area to interactively execute code.\nFiles. By default, this pane has your working directory. From here you can access files associated with the project.\n\n\n\n\n\nUser Interface\n\n\n\n\n\n\n\nDownload script"
  },
  {
    "objectID": "data/01_intro.html#programming-for-social-science-research",
    "href": "data/01_intro.html#programming-for-social-science-research",
    "title": "Introduction to Computational Social Science and R",
    "section": "",
    "text": "Understanding social science research. Combination of Statistics and Programming allows you to read, understand, and reproduce other scholars’ works.\nAutomation of manual labor. Programming saves time in many tasks. Calculations, data gathering, and many other tasks could be automated with basic knowledge of programming.\nProducing your own research. Programming empowers researchers to design and execute their own custom analyses, simulations, and data visualizations.\n\n\n\n\nExcel\nStata/SPSS/etc.\nPython\n\nR is the second most-used statistical software in academia.1 New social science methods and thus packages are usually either developed in R or adapted to R (e.g., quanteda for NLP, CEM for causal inference, etc.). However, R allows you to do much more. For example, this website was made with R and RStudio.\n\n\n\nFirst, we need to install R. Click the button below and click “Download and Install R”. Choose your OS. For Windows you need to download “base”; for MacOS and Linux you have to choose the version of your OS. Install.\n\nDownload R\n\n\n\nStep one\n\n\n\n\nFor windows:\n\n\n\n\nSecond, we need to install RStudio. Click the button below and click “Download RStudio Desktop”. You will be redirected to your version automatically. Install.\n\nDownload RStudio\n\n\n\nStep two\n\n\n\n\n\n\n\n\nIt will take some time to understand how everything works in RStudio, but once you understand it, it’s quite straightforward. The most classic UI consists of four panes.\n\nSource. Here we write code to run.\nEnvironment. This pane allows you to interact with the data loaded into RStudio.\nConsole. This pane provides an area to interactively execute code.\nFiles. By default, this pane has your working directory. From here you can access files associated with the project.\n\n\n\n\n\nUser Interface\n\n\n\n\n\n\n\nDownload script"
  },
  {
    "objectID": "data/01_intro.html#markdown-and-quarto",
    "href": "data/01_intro.html#markdown-and-quarto",
    "title": "Introduction to Computational Social Science and R",
    "section": "Markdown and Quarto",
    "text": "Markdown and Quarto\nIn RStudio, you can use Markdown language to format text.\nFor example, this is bold text and this is italic text. And, of course, you can insert images. It’s pretty easy, and after the class you can take a look at some tutorials.\n\n\n\nNorthwestern Logo\n\n\nYou can do many-many more different things. In this regard, visual editor in RStudio might be helpful. Markdown is also used in several note taking apps, e.g. Obsidian or Notion. Feel free to utilize your Markdown knowledge for your graduate studies.\nGenerally, what we’ve done so far can be described by the image below. We have downloaded R (“engine”) and RStudio (“car”). In Rstudio we have Quarto, which is this document you are working with now. We can do a lot of things right away – e.g., render our output to a Word document, PDF or HTML.\n\n\n\nR software"
  },
  {
    "objectID": "data/01_intro.html#data-structures-in-r",
    "href": "data/01_intro.html#data-structures-in-r",
    "title": "Introduction to Computational Social Science and R",
    "section": "Data Structures in R",
    "text": "Data Structures in R\n\nObjects: Basic Operations\nNow, let’s turn to statistics and programming. This gray part of the document is called chunk or code block. Here we can code. Let’s create an object called number and assign it the value 1.\n\nnumber &lt;- 1\nnumber\n\n[1] 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nFirst shortcut. On windows you can use Alt and -, on Mac you can use Option and - to insert assignment operator. Try it out! Alternatively, you can always type &lt;- or = yourself.\n\nword ... c(\"Northwestern\")\nword\n\n\n\nAs you noticed, created objects can contain different information, be it numbers or words. As R is the object-oriented language, we can perform different manipulations with our objects.\n\nFor example, some basic mathematical operations with numbers\n\n\nnumber + 2\nnumber - 2\nnumber * 2\nnumber / 2\n\n[1] 3\n[1] -1\n[1] 2\n[1] 0.5\n\n\n\nWith words, for example, you can calculate the number of characters\n\n\nnchar(word)\n\n\n\nVectors: Logical Operations and Descriptive Statistics\nBut the real power of programming starts with vectors. Vectors are collections of objects. To create one, you will need to use function c(). Here’s an example,\n\nnumbers &lt;- c(1, 2, 3)\nnumbers\n\n[1] 1 2 3\n\n\n\n\n\n\n\n\nTip\n\n\n\nSecond shortcut. To insert a chunk on Windows you can use Ctrl+Alt+I, on Mac Cmd+Option+I. Try it out and instead of ... insert the following code in this chunk: words &lt;- c(\"Welcome\", \"to\" ,\"Northwestern\")\n\n\n...\n\nBasic logical operations\nLet us start with numbers. R allows you to automate calculation of statistics, perform different manipulations on a set of values.\n\nnumbers + 5\n\n[1] 6 7 8\n\n\nYou can check if some object in a vector is equal to some specified value using == operator. For example:\n\nnumbers == 2\n\n[1] FALSE  TRUE FALSE\n\n\nWhy are we using a double equal sign?\nFurthermore, we can easily check what values are greater or less than some number.\n\nnumbers &gt; 2\n\n[1] FALSE FALSE  TRUE\n\nnumbers &lt; 2\n\n[1]  TRUE FALSE FALSE\n\n\nThe table below summarizes most important logical operators in R. They are quite straightforward, but it might take some time to memorize them.\n\n\n\nOperation\nSymbol\nExample Usage\n\n\n\n\nEqual to\n==\nx == y\n\n\nNot equal to\n!=\nx != y\n\n\nGreater than\n&gt;\nx &gt; y\n\n\nLess than\n&lt;\nx &lt; y\n\n\nGreater than or equal to\n&gt;=\nx &gt;= y\n\n\nLess than or equal to\n&lt;=\nx &lt;= y\n\n\nLogical AND\n&\n(x &gt; y) & (a &lt; b)\n\n\nLogical OR\n|\n(x &gt; y) | (a &lt; b)\n\n\nLogical NOT\n!\n!(x &gt; y)\n\n\n\nLet’s say we asked a group of people their ages in an Evanston coffee shop. We obtained the following data and assigned it to an object called age.\n\nage &lt;- c(18, 20, 21, 19, 24, 21, 20, 22)\n\nYou can access the data using indexation. Let’s say you entered the data into your object age as you were receiving the results. You can access the age of your second respondent by indicating [i] to an object.\n\nage[2]\n\n[1] 20\n\n\nWho is allowed to order espresso martini (yes, in the US drinking age is 21!)?\n\nage ... 21\n\nWho is not 20 years old?\n\n...\n\nWho is between 20 and 22?\n\n(age &gt;= 20) & (age ... 22)\n\nIs the 4th respondent older than the 2nd?\n\nage[...] ... \n\n\n\n\n\n\n\nTip\n\n\n\nThird shortcut. To run only selected line of code or a code highlight you can use Ctrl + Enter on Windows and Cmd + Return on Mac. Try accessing age of 4th and 2nd respondents separately.\n\n\n\n\nDescriptive statistics\nNow we are turning to slightly more advanced topics. Most commonly people describe the whole data they have (sometimes it’s hundreds and thousands of observations) with only a couple of numbers.\nFor example, we can calculate the average age in our surveyed group.\n\nmean(age)\n\n[1] 20.625\n\n\nAlternatively, we can describe our data with minimum and maximum values.\n\nmin(age)\nmax(age)\n\n[1] 18\n[1] 24\n\n\nUsually such description of data is called descriptive statistics. There is a helpful command summary() that allows us to describe data in one line. Try it out! What is the median you got?\n\nsummary(...)\n\nYou can use the table below for your reference\n\n\n\nStatistic\nFunction\nExample Usage\n\n\n\n\nMinimum\nmin()\nmin(x)\n\n\nMaximum\nmax()\nmax(x)\n\n\nMean\nmean()\nmean(x)\n\n\nMedian\nmedian()\nmedian(x)\n\n\nStandard Deviation\nsd()\nsd(x)\n\n\nVariance\nvar()\nvar(x)\n\n\nSum\nsum()\nsum(x)\n\n\nSummary\nsummary()\nsummary(x)\n\n\n\nWe also asked people in the coffee shop about their majors and received the following data:\n\nmajor &lt;- c(\"computer science\", \"sociology\", \"sociology\", \"political science\", \"political science\", \"political science\", \"computer science\", \"sociology\")\n\nTry to get the descriptive statistics for this data.\n\n...\n\nFor text data you might want to calculate the number of people in each major.\n\ntable(major)\n\nmajor\n computer science political science         sociology \n                2                 3                 3 \n\n\nInsert a chunk and access major of the 3rd respondent.\n...\n\n\n\nDataframes\nA dataframe is one of the most commonly used data structures in data analysis. It is a simple table, similar to those you have probably seen in Excel. Let’s create one. We have two vectors, age and major. We can combine them into one table.\n\nrespondents &lt;- data.frame(age, major)\nrespondents\n\n  age             major\n1  18  computer science\n2  20         sociology\n3  21         sociology\n4  19 political science\n5  24 political science\n6  21 political science\n7  20  computer science\n8  22         sociology\n\n\nColumns are vectors. In a table format they are referred to as variables (and thus these labels are used interchangeably). Rows are called observations. There are some useful commands that provide information about your dataframe.\n\nNames of your variables\n\n\nnames(respondents)\n\n[1] \"age\"   \"major\"\n\n\n\nNumber of rows in your dataframe\n\n\nnrow(respondents)\n\n[1] 8\n\n\n\nNumber of columns in your dataframe\n\n\nncol(respondents)\n\n[1] 2\n\n\n\nNumber of dimensions (number of rows and columns)\n\n\ndim(respondents)\n\n[1] 8 2\n\n\nTo access a variable as vector you can use $ sign.\n\nrespondents$age\n\n[1] 18 20 21 19 24 21 20 22\n\n\nThis would allow you to manipulate this variable. And as a spoiler of the future sections, let’s visualize this data!\n\nhist(respondents$age)\n\n\n\n\n\n\n\n\nYou can easily combine previously used functions. For example, indexation provides access to any observation.\n\nrespondents$major[8]\n\n[1] \"sociology\"\n\n\nOr you can get the maximum age in our dataset.\n\nmax(respondents$age)\n\n[1] 24\n\n\nMoreover, $ operator can create a new variable in your dataframe. Let’s calculate the number of characters in majors using the nchar() function\n\nrespondents$nchar_major &lt;- ...(respondents$...)\nrespondents\n\nHere is a dataset that consist of information about selected cars. Provide your answers to the questions using code\n\ncars_information &lt;- mtcars\n\nWhat information is included in the dataset (list names of the variables)?\n\n\n\n\n\n\nTip\n\n\n\nTo understand what these variables stand for you can check details about included datasets or any other functions using ?\n\n?mtcars\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nHow many cars are listed in the dataframe (how many rows are there)?\nDescribe mpg variable. Include average, minimum and maximum.\nWhat is the minimum horsepower (hp)?\nAre there any cars that have horse power greater than 200 but less than 250?\nCreate a new variable called power_to_weight, which calculates the ratio of horsepower (hp) to weight (wt). You need to divide horsepower by weight\nWhat is an average Power to Weight Ratio?\nWhat is a minimum Power to Weight Ratio?\nCreate a histogram of power_to_weight variable"
  },
  {
    "objectID": "data/01_intro.html#data-classes",
    "href": "data/01_intro.html#data-classes",
    "title": "Introduction to Computational Social Science and R",
    "section": "Data classes",
    "text": "Data classes\nAs you have noticed, we deal with different classes of data. Sometimes these are words (e.g., names of cars or majors) and numbers (e.g., age or horsepower). The analysis we perform is highly dependent on data classes. But before discussing it in a detail, we need to install one library that would help us to grasp this difference. All functions we have worked before are base to R. However, to access some other useful functions we might need to download add-ons/libraries/packages (used interchangeably). Run the code below to install DiagrammeR library. You need to do it only once.\n\ninstall.packages(\"DiagrammeR\")\n\nThese are the basic classes of data in R. Some examples might include:\n\nNominal: Names, Labels, Brands, Country names, etc.\nOrdinal: Educational Levels (High School-BA-MA-PhD), Customer Rating (Unsatisfied-Neutral-Satisfied), etc.\nDiscrete: Number of customers per day, number of seats won by political parties, etc.\nContinuous: Height of people, voter turnout, etc.\n\n\n\n\n\n\n\nFor each object, vector, or variable, you can check its class\n\nclass(cars_information$mpg)\nclass(respondents$major)\n\n[1] \"numeric\"\n[1] \"character\"\n\n\nAlternatively, you can check if this variable is of specific class\n\nis.integer(cars_information$mpg)\nis.character(cars_information)\n\n[1] FALSE\n[1] FALSE\n\n\nTake a look on the cyl variable in cars dataset. What is its class?\n\n...\n\nclass(...)\n\nDo you think R classified it properly? If a variable is identified incorrectly, you can change it.\nFor example, you can change it to a factor.\n\ncars_information$cyl &lt;- as.factor(cars_information$cyl)"
  },
  {
    "objectID": "data/01_intro.html#loading-data-and-exercises",
    "href": "data/01_intro.html#loading-data-and-exercises",
    "title": "Introduction to Computational Social Science and R",
    "section": "Loading data and Exercises",
    "text": "Loading data and Exercises\nData classes become increasingly relevant as you work with public datasets. I suggest you inspect if the variables were treated correctly by R.\nHere are the most common file types to save/load your datasets:\n\ncsv is widely universally in data analysis. A default option for R users\nxslx is Excel’s file type. You can easily use it in R too\ndta is Stata file, you can use it in R too\nrds is R file. Most comfortable to work with in R.\n\nLet’s try the most used one, namely csv. Download Corruption Perception Index dataset from transparency international using this URL.\nYou need to put this dataset to your current working directory, which is\n\ngetwd()\n\nThen, load the dataset. CPI = 0 is a highly corrupt country, whereas CPI = 100 is very clean.\n\ncpi &lt;- read.csv(\"cpi.csv\")\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat are the variables in the dataset?\nHow many observations are there?\nCheck the classes of the variables. Are they correct?\nProvide the descriptive statistics of cpi_2023 variable\nCreate a new variable that provides the difference between CPI of a country in 2023 and 2022. On average, are countries getting cleaner in terms of corruption?\nDraw a histogram of this newly created variable\nCalculate average and median. Are they different - if yes, why?"
  },
  {
    "objectID": "data/01_intro.html#prepare-for-the-tomorrows-class",
    "href": "data/01_intro.html#prepare-for-the-tomorrows-class",
    "title": "Introduction to Computational Social Science and R",
    "section": "Prepare for the tomorrow’s class",
    "text": "Prepare for the tomorrow’s class\nYou’ll need to install tidyverse library. It allows you to do so many more! Insert the name of the library and install it.\n\ninstall.packages(...)\n\nSmall spoiler alert what you can do with it! Do you remember the histogram we created earlier? Check it out. This is a pretty powerful tool to understand what’s going on in your data. See you tomorrow!\n\nlibrary(tidyverse)\nggplot(data = respondents) +\n  geom_histogram(aes(x = age, fill = major), binwidth = 2)"
  },
  {
    "objectID": "data/01_intro.html#check-list",
    "href": "data/01_intro.html#check-list",
    "title": "Introduction to Computational Social Science and R",
    "section": "Check List",
    "text": "Check List\n I know what panes in RStudio used for\n I know what objects, vectors and dataframes are, and I know how to create them\n I know what variables and observations are\n I know what descriptive statistics is and I can easily calculate average, median, etc.\n I know how to create a variable and how to change its class\n I know how to load data to R and how to install new libraries"
  },
  {
    "objectID": "data/01_intro.html#sources",
    "href": "data/01_intro.html#sources",
    "title": "Introduction to Computational Social Science and R",
    "section": "Sources",
    "text": "Sources\n\nHigher School of Economics, Data Science Minor, https://electives.hse.ru/minor_data_spb/\nPosit, RStudio User Guides, https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html\nTransparency International, Corruption Perception Index, https://www.transparency.org/en/cpi/\nUT Austin, Department of Government, Methods Camp, https://methodscamp.github.io/\nHarvard University Department of Government, Math Prefresher, https://iqss.github.io/prefresher/"
  },
  {
    "objectID": "data/01_intro.html#footnotes",
    "href": "data/01_intro.html#footnotes",
    "title": "Introduction to Computational Social Science and R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ndetails here↩︎"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Status\n\n\nTitle\n\n\nTerm\n\n\nLevel\n\n\nLinks\n\n\n\n\n\n\n\n\n\nStatistical Research Methods\n\n\n2025 Spring\n\n\nUG\n\n\n\n\n\n\n\n\n\n\nLinear Models\n\n\n2025 Winter\n\n\nG\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "teaching.html#current",
    "href": "teaching.html#current",
    "title": "Teaching",
    "section": "",
    "text": "Title\n\n\nTerm\n\n\nLevel\n\n\nLinks\n\n\n\n\n\n\n\nNo matching items"
  }
]